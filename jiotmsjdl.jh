

entity LoadOrder {     
     orderNumber String,
     description String ,
     shipmentNumber String,
     bol String,
     pickup LocalDate,
	 drop LocalDate,
     pickupLocation String,
	 dropLocation String,
     currentLocation String,
     status  StatusEnum,
     detention Long,
     chasisInTime Instant,    
     pod ImageBlob,
     hazmat HAZMAT,
     recievedBy String ,
     coveredBy  COVEREDBY ,
     loadType LoadType ,
     containerSize  SizeEnum ,
     numbersOfContainer Integer ,
     comments String
     
	}
    
    
enum HAZMAT {
YES ,  NO
}

entity Invoice {
     invoiceId UUID ,
     orderNo String,
     taxRate Double,
     taxType TaxType,
     currency CURRENCY ,
     invoiceTaxTotal Double,
     invoiceSubTotal Double,
     invoiceTotal Double,
     invoiceDate LocalDate ,
     invoicePaidDate LocalDate ,
     payRefNo String ,
     invoiceDueDate LocalDate ,
     status  InvoiceStatus ,
     invoicePdf Blob ,
     remarks String
	
}

entity InvoiceItem {
     
     description String,
     qty Integer,
     price Integer,
     total Integer
     
	}

entity Insurance { 
  providerName String,
  issueDate LocalDate ,
  expiryDate LocalDate ,
  policyDocument Blob ,
  coverageStatement String 
  }

entity Customer {
	
    company String,
	firstName String,
	lastName String,
    contactDesignation Designation ,
	email String,    
 	phoneNumber Long,    
    address String,
    streetAddress String,
    city String,
	stateProvince String,
    country CountryEnum,
	postalCode String ,
    dot String ,
    mc Long ,
    companyLogo ImageBlob ,
    customerSince LocalDate ,
    remarks String,
    contract Blob
   
   }

entity Contact {
	
	firstName String,
	lastName String,
    contactDesignation Designation ,
	email String,
 	phoneNumber Long ,
    remarks String
    
}

entity Driver {
    company String,
	firstName String,
	lastName String,
	email String,
	phoneNumber Long,
	licenceNumber Long,
    dob LocalDate ,
    companyJoinedOn LocalDate ,
    companyLeftOn LocalDate 
    image ImageBlob ,
    licenceImage ImageBlob ,
        remarks String
    
}

entity OwnerOperator {
    company String,
	firstName String,
	lastName String,
    contactDesignation Designation ,
	email String,
 	phoneNumber Long,    
    address String,
    streetAddress String,
    city String,
	stateProvince String,
    country CountryEnum,
	postalCode String ,
    dot String ,
    mc Long ,
        remarks String
    
    

}

enum COVEREDBY {
CompanyDriver , OwnerOperator   
   }
enum CountryEnum {
    USA, CANADA, MEXICO
}
enum CURRENCY {
USD , CAD , INR

}
enum TaxType {
    GST, FEDRAL
}
enum EquipmentEnum {
    TRAILER, CONTAINER, CHASIS
}
enum SizeEnum {
   C53 , C43 , C20 
}

enum LoadType {
    REEFER , FLATBED , LTL  
}
enum StatusEnum {
    PICKEDUP, ONROAD , DELIVERED , INVOICED
}

enum InvoiceStatus {
    DRAFT, GENERATED , SENT , PAID , OVERDRAFT , VOIDED , PARTIALLY_PAID
}

enum Designation {
    MANAGER, ACCOUNTANT , OWNER , DISPATCHER
}



/** not an ignored comment */
entity Location {
	address String,
    streetAddress String,
    city String,
	stateProvince String,
    country CountryEnum,
	postalCode String
	
}

relationship OneToOne {
   
	// Location{customer (company)  } to Customer{billingAddress (city) }
    
   //  Customer{custInsurance (providerNumber)  } to Insurance  {customer (company)  } 
   
    OwnerOperator{operInsurance} to Insurance {OwnerOperator}
  
}
// defining multiple OneToMany relationships with comments
relationship OneToMany {
   
	Customer{loadOrder(orderNuber)} to LoadOrder {customer(email)}
    Customer{invoice} to Invoice {customer(company)}
    Driver{loadOrder} to  LoadOrder{driver} 
    
    
}
relationship ManyToOne {
 LoadOrder {ownerOperator}       to   OwnerOperator {loadOrder} 
 Contact  {customer (company)  } to  Customer{morecontact (designation)  }
}
//relationship ManyToMany {
  //LoadOrder{driver} to Driver{loadOrder}
//}


// relationship OneToMany {
  
  //  BookingItem {equipment(number)}   to Equipment,
   // BookingItem {driver(firstName)}   to  Driver{bookingItem(description)}
	
// }
//relationship ManyToOne {
//  Invoice{invoiceTo} to Customer
// }


// Set pagination options
//paginate JobHistory, Employee with infinite-scroll
paginate LoadOrder with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl 

// Set an angular suffix
// angularSuffix * with mySuffix
